#+Title: LTPL : Loki Text Processing Language Manual
#+Date: 2/7/22
#+STARTUP: latexpreview
* Introduction 
** What Is This Exactly ?
   LTPL is a declarative text processing and manipulation Domain Specific Language utility that specializes in making common
   text processing tasks as easily and tersely as possible.
** Who Is This For ?
   This is a tool mainly for programmers and users who require rigid formatted text output. Specifically targeting
   those who would traditionally use sed to do so.
** Why Does This Exist ?
   I wanted a utility that had the power of awk in some ways but less C like.
   sed exists but the issue I find with sed its it is very regular expression like and it can be hard to read.
   lplt isnt easy to read by any stretch of the imagination but I find it easier to read than sed.
** What This Tool Is
*** It is a Utility For Text Manipulation
   ltpl is more a utility along the lines of sed and awk than an actual language you would write in a file.
    It meant to be embedded in sh scripts and to be used either along side or be more versatile than more traditional tools.
*** It is a Sed replacement
    Sed is the standard stream editor that allows you to edit files and streams much like lptl does.
    however the issue with sed is that sed isnt 
** What This Tool Is Not    
*** It Is Not /Complete/ Replacement For Awk. 
    I am only comparing my language periodically to awk as the closest parallel of the language that exists and is in relative popular use today.
    I am aware that awk is a more traditional language with a much more familiar syntax that is meant to write programs and scripts that may be run from a file or piped in from another program.
    however the purpose of LTPL is explicitly for reading in and displaying data.
    
*** It Is Not A General Purpose Scripting Language
    This tool is not for all intensive purposes is not a scripting language nor should it ever be used as one.
    LTPL is a terse and simple text processing utility and nothing more.

    
** Why The Cryptic Syntax
   LTPL's syntax and grammar is very simple aiming and being simple to use in a terminal environment.
   With this consideration taken a APL or Regular expression like syntax was considered appropriate for a speedy interactive usage that I was trying to achieve.
* Essentials
  There are four core concepts exhibit themselves in LTPL.
  The language its self is rather simple which makes it a very powerful tool for parsing text.

  - Objects
  - Reader Directives
  - Actions
  - Regular Expressions

** Objects
*** What Are Objects ?
    Objects in ltpl really are one of the most complex things in the entire language.
    but even though they are complex they are also rather simple in structure.
    Objects are hierarchical and able to be indexed quite simply as well.

    objects are the way that ltpl represents data. 
*** Object Primitives       
**** Strings 
     To put it shortly strings are the core part of the ltpl type system.
     everything in some manner eventually breaks down into some conglomeration of strings.
     
     The representation of strings can be shown as this:
    #+begin_src shell
      10 20 30 hello good_bye 10.6
    #+end_src

    Say I wanted to represent the string of "hello world"
    that would be represented as so
    #+begin_src shell
      hello__world
    #+end_src

    where the "__" is the representation of white space
   
**** Escape Sequences
if you are more familiar with the C family of languages, C++,C Rust,Java etc.
you are quite aware of the utility and purpose of escape sequences.

#+begin_src C
  int main() {
    const char *str1 = "hello world\n";
    const char *str2 = "good__bye ";
    const char *str3 = "greetings\t";
    const char *str4 = "bye\r\t\n";
    const char *str4 = "this is a bell \a";
    
    return 0;
  }
#+end_src

most if not all of the examples has been needed at one time or another.
the three most common of which are "\n" "\r" "\t" which stand for
newline carriage return and tab respectively can be represented with using the single
quote like so:

#+begin_src lisp
   \LINEFEED
   \CARRIAGE_RET
   \TAB 
   \__
   \BEEP 
#+end_src
This is all fine and dandy but in C and other languages those aren't are not the only things you would need to escape
#+begin_src C
  int main() {
    const char *str1 = "\"hello\""
    const char *str2 - "\'hello\'"
    return 0;
  }
#+end_src

In C and most other languages the " " are delimiters for representing strings
luckily in ltpl this doesn't exist.
" and ' are like any other character, However that does not mean there aren't things 
that need to be escaped. for reasons that will be covered in subsequent sections.
the following are required to be quoted when needing to be manipulated or assigned to an object.

- any object that is the name of an action MUST be prefaced by the escape delimiters
- ANSI terminal colors are not escapable (three's a good reason for that will be discussed later)

**** Numbers and Operators
   in ltpl all objects are represented as a tree structure of strings. 
   however that being said everyone programmer needs a way to express numerical computations.
      
   There are two things that may determine the type of an object
   - The operators that are enacted on the object and
   - The action that the object is being applied to.

   for example:
   10 in its self is not the numerical representation of ten.
   no more than the letter b is a numerical representation of 1.
   "10" is the string that contains the substrings of 1 and 0.
      
   10 can be associated to its numerical representation by being used in an action that expects a numeric type as so.
   
   for the sake of example let i = 10
   #+begin_src shell
     $i+10 ==> 20
     10~$i ==> 1010
   #+end_src
   notice how the first operator "+" (which in most if not all languages is numeric addition) using the string stored in i as a numerical type.
   on the next line the "~" (concatenation) operator since 10 is being used by the concatenation operator and the concatenation operator expects strings 
   10 is acted upon as as string.
   so naturally if 10 is i then 10 concatenated with i is 1010
   
    there are quite a few operators in ltpl
    - addition +
    - subtraction -
    - multiplying *
    - modulus %
    - division /  
    - power ^
    - concatenation ~
    - split-on |
    - split-at :
    - expansion !
     
#+begin_src shell
  10+10 -> 20
  10-10 -> 0
  10*10 -> 100
  10/10 -> 1
  10^10 -> 10000000000 

  10~10 -> 1010
  100|0 -> 1
  100:0 ->      #empty string 
  100! -> 1 0 0 # special operator to be explained
#+end_src

**** Indexing On Objects
As said before all objects in ltpl are strings by default.
Like in any language containing strings you would be able to index into them and extract certain values.

given the object of: 
#+begin_src sh
    10
#+end_src
Lets say we want to get a sub object of 10
#+begin_src sh
    10$[1+1] -> 0
    10$[2] -> 0
    10$[0+2] -> 0
    10$[0+0+0+0+2] -> 0
    10$[.5*2]-> 0
    10$[0.5*2] -> 0
#+end_src
/each of these are equivalent due to arithmetic evaluation/
the power of programmatic indexing is evident but at times we just want it to be simple. 
in practice you could 100% do this:
#+begin_src sh 
  10$[1] -> 1
#+end_src
because the first object that makes up the object primitive 10 is 1
However you could also write this which is entirely syntactically equivalent to the notation above:
#+begin_src sh
    10$1
#+end_src
the short hand of indexing into objects are the prefered way to index objects in ltpl.
the only time the more verbose indexing should be used is when the index given is an object.

naturally you would think that you could index like this.
but unforentatly you can not. 
#+begin_src sh 
    10$1+1 -> 2
#+end_src 
Instead of giving our desired result of 0 we get 2 due to the fact that ltpl
sees the object 10$1 which evaluates as 1 which is added to 1 which results in 2.
#+begin_src shell
  330$1 is equivalent to 330$[1]
  however 330$1+2 and 330$[1+2] are not.
#+end_src

*** Object References
like any other scripting or programming language it would be nice to have a way to store data that may change at run time.
this is where object referances come in.
object referances can be any letter that is not already defined either implicitly (which we will get to) or defined in your script.
*** Assignment
    Defining new variables along with reassigning existing ones are core parts of any programming language (except for the Haskell purists out there)
    ltpl is no different;
#+begin_src shell
  ltpl example.txt "$bar[10]"
  ltpl example.txt "$foo[10+9]"
  ltpl example.txt "$var"
#+end_src
in this example foo and bar are 10, while the uninitialized the var's value is defaulted to empty string.
    
*** Hierarchy Tree Structure
In ltpl ALL objects are actually tree structures that contain a variety of meta data.
All ltpl objects primitive or references contain the lowest decomposible slice of an object and its length.

we saw this behavior in an introduction to objects.

(insert image here of tree)

This is an example of getting the length of the objects.
#+begin_src shell
  $10$# = 2
  $foo$# = 3
#+end_src

*** Implicit Objects and Fields
Due to the brevity of and the intended user environment of the language. 
The decision of adding implicitly or automatically was made.
Not all of which will be covered in this section however the most useful of which will be covered.

(ill cover that at some point)

Before discussing the most useful and relevant use we need to cover the most useful and relvent part of ltpl.
that being fields.

Fields are just like any other implicit object


** Reader Directives
*** What Is A Reader Directive
    A Reader Directive is a command to the intepreter that directs the manner in which the input file will be parsed.

    There are two main Reader Directive types in ltpl.
    - Parsing Directives
    - Range Specifiers

**** *Parsing Directives*
      Parsing Directives which controls how the file is able to be read.
      there are a variety of different ways text can be formatted. 
      It is not always appropriate to read file left to right.
      
      /and yes im sorry ltpl is 1 indexed throught the language, but there is a very good reason/
      |-------------------+---------------------+--------------+--------------------------|
      | Reader Directives | Parse Description   | $FS Default  | Starting Cursor Position |
      |-------------------+---------------------+--------------+--------------------------|
      | ==                | parse left to right | " " Space    | (1,1)                    |
      |-------------------+---------------------+--------------+--------------------------|
      | \vert \vert       | column by column    | "\n" Newline | (1,1)                    |
      |-------------------+---------------------+--------------+--------------------------|
      | ^^                | column by column    | "\n" Newline | (1,n)                    |
      |-------------------+---------------------+--------------+--------------------------|
      | --                | Read a single line  | " " Space    | (1,n)                    |
      |-------------------+---------------------+--------------+--------------------------|
      | <=                | read right to left  | " " Space    | (n,1)                    |
      |-------------------+---------------------+--------------+--------------------------|
       /where n is the number of elements in that row or column/

Here is an example on how reader directives can be used with some formated input
      #+begin_src shell
        $ ls -l

        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Desktop 
        drwxr-xr-x 2 user user  4096 Feb  4 00:36 Documents
        drwxr-xr-x 3 user user  4096 Feb  6 23:16 Downloads
        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Music 
        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Pictures
        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Public 
        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Templates 
        drwxr-xr-x 2 user user  4096 Jan 20 19:42 Videos

        $ ls -l | ltpl "==$5[*:1024][p]."
        Output: 

        4194304 
        4194304 
        4194304 
        4194304 
        4194304 
        4194304
        4194304
        4194304 
      #+end_src 
      /where we are getting the 5th element and multiplying it by 1024 and printing the output/

Another way to achieve the same behavior but more efficently would be to do 
      #+begin_src shell
      $ ls -l

      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Desktop 
      drwxr-xr-x 2 user user  4096 Feb  4 00:36 Documents
      drwxr-xr-x 3 user user  4096 Feb  6 23:16 Downloads
      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Music 
      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Pictures
      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Public 
      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Templates 
      drwxr-xr-x 2 user user  4096 Jan 20 19:42 Videos

      $ ls -l | ltpl "||$5[*:1024][p]."

      4194304 
      4194304 
      4194304 
      4194304 
      4194304 
      4194304
      4194304
      4194304 
      #+end_src 
      The only difference here from the example above is the way that the interpter reads the information.
      instead of reading every single field starting with /drwxr-xr-2/ and ending when we find $5 which in this case is 4096.
      we can get entire columns of text just by reading by column.

Examples of the other reader directives being used can be found at .... (havent made a place for it yet)

**** *Range Specifiers*
     
     There are a lot of times we want to ommit certain places where we have junk in a file. 
     By junk I dont really mean garbage in the sense that its not important but I mean
     that its not applicable for what we need.
     
     you can achieve this by using Range Specifiers which controls what field the given lines of the input will be read.

     A Position Specifier may be used in combitation with a Parser Directive to give more flexibilty to the user;
     detailing what subset of data of the input that will be read.

     given the following syntax.
     #+begin_src shell
     "||0,1"
     #+end_src
     /which reads each column skipping the first column entirely/
     
A practical application to get all of the numbers on line 5 would be
     #+begin_src shell
       $ cat file.txt
       John Doe
       March 21st, 2022
       John_The_Doe@hotmail.com

       10 20 30 40 50
       hello good bye

       $ ltpl file.txt "--5,5@[p]"
       10 20 30 40 50
     #+end_src
/where it reads only one singular line of text at line 5 and prints it/


An ltpl implementation of head
#+begin_src shell
$ ltpl "1,10@[p]."
#+end_src

in just a few characters we implemented an entire Unix utility.
granted its not much however its definely a powerful tool to do this type of thing.

An ltpl implementation of tail
#+begin_src shell 
$ ltpl "$NF-10,$NF@[p]."
#+end_src



** Actions
*** What Is An Action
    An action is the primary enact changes to Objects. they are syntactically represented within the [ ].
**** Example     
#+begin_src shell
$ ls -l
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Desktop 
     drwxr-xr-x 2 user user  4096 Feb  4 00:36 Documents
     drwxr-xr-x 3 user user  4096 Feb  6 23:16 Downloads 
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Music
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Pictures  
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Public 
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Templates 
     drwxr-xr-x 2 user user  4096 Jan 20 19:42 Videos
     
     ls -l | LTPL "==@$6[p]"
     
     Output:
     Jan 
     Feb 
     Feb  
     Jan 
     Jan 
     Jan 
     Jan 
     Jan 
     #+end_src
*** Actions Predefined
**** Output And More Output
Keeping within the bound of the promise that this is not a scripting language There is no way to prompt users for input as in a getchar of some sort you would see in
other programming languages In LTPL There a variety of different mechinisms that the user to write to a file of their choice. 
***** Writing To Files
      What Would a text processing language be with out being able to save the manipulated text to files write to files.
*** Why Can't I Define My Own Actions
    well there is a simple answer to that. LTPL is not a scripting language. If you feel you need to define your own actions to make a certain action easier. you should look at some other language.
    consider using AWK or perl.

 |----------+---------------------------------------------------------------------------------------------------------------------|
 | Name     | Description                                                                                                         |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $0       | The 0th field refering to the whole line of text. That contains an object array of the                              |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $n       | The $nth field that refers to an object that is broken up into fields by the $FS                                    |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $FS      | the delimiting character(s) that designantes the seperation of new tokens by a user defined or ltpl specified token |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $CL      | the current line being read                                                                                         |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $PL      | previous line read                                                                                                  |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $NL      | the next line to be read.                                                                                           |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $NLR     | the number of lines that have been read.                                                                            |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $NTR     | the number of lines that need to be read.                                                                           |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $RED     | The Color Red 255 0 0                                                                                               |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $GREEN   | The Color Green 0 255 0                                                                                             |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $BLUE    | The Color Blue                                                                                                      |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $BLACK   |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $WHITE   |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $CYAN    |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $MAGENTA |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $YELLOW  |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $PURPLE  |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $PINK    |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|
 | $ORANGE  |                                                                                                                     |
 |----------+---------------------------------------------------------------------------------------------------------------------|


      
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| Name             | Symbolic Name | Description                                                                           | Possible Arguments             | Examples                                        |
|                  |               |                                                                                       |                                |                                                 |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| print            | p             | Prints an object to stdout                                                            | p -red -green -blue \vert none | ---$1[p 255,0,0].                               |
| write            | w             | writes objects to a file                                                              | w -filename \vert -filename    | ---$0[w file.txt].                              |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| filter           | ~             | removes if condition is true                                                          | ~ -logical operator -object    | ---$0[~=10][p].                                 |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| ternary          | ?             | does the next action if true the action after if false                                | ? - logical operator object    | ---$1[?:=:10]Success[p:0:255:0]fail[p:255:0:0]. |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| italic           | I             | underlines the object when printed                                                    | none                           | ---$0[i][p].                                    |
| bold             | B             | underlines an object when printed                                                     | none                           |                                                 |
| underline        | _             | underlines an object when printed                                                     | none                           | ---$0[_][p].                                    |
| highlight        | #             | highlights an object                                                                  | none                           | ---$0[#:$RED][p]                                |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|
| shift down line  | VV            | shfits a line down into the line below it.                                            |                                |                                                 |
| shift up line    | ^^            | shifts a line  up to the line above it.                                               |                                |                                                 |
| Swap lines       | <<>>          | trades positions of lines                                                             |                                |                                                 |
| shift field down | V             | replaces object of the next line and the same field                                   |                                |                                                 |
| shift field up   | ^             |                                                                                       |                                |                                                 |
| Move Right       | >>            | shifts an object right by one field replacing the object that inhabited that location | none                           | ---$1[>>]$2[p].                                 |
| Move Left        | <<            | shifts an object left by one field replacing the object that inhabited that location  | none                           |                                                 |
|------------------+---------------+---------------------------------------------------------------------------------------+--------------------------------+-------------------------------------------------|


